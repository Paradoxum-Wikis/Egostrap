// Utilities
// Various utility classes for common CSS properties
// This is the important part of the framework

@use "variables" as *;
@use "sass:meta";

// Display
$display-properties: "block", "inline", "inline-block", "flex", "inline-flex", "grid", "inline-grid", "table", "table-cell", "table-row", "none";

@each $prop in $display-properties {
    .d-#{$prop} { display: #{$prop} !important; }
}

@each $name, $breakpoint in $breakpoints {
    @media (min-width: #{$breakpoint}) {
        @each $prop in $display-properties {
            .d-#{$name}-#{$prop} { display: #{$prop} !important; }
        }
    }
}

// Flexbox Alignment
$justify-content: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "between": space-between,
    "around": space-around,
    "evenly": space-evenly
);

$align-items: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "baseline": baseline,
    "stretch": stretch
);

$align-self: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "baseline": baseline,
    "stretch": stretch
);

$align-content: (
    "start": flex-start,
    "end": flex-end,
    "center": center,
    "between": space-between,
    "around": space-around,
    "stretch": stretch
);

@each $key, $value in $justify-content {
    .justify-content-#{$key} { justify-content: $value !important; }
}
@each $key, $value in $align-items {
    .align-items-#{$key} { align-items: $value !important; }
}
@each $key, $value in $align-self {
    .align-self-#{$key} { align-self: $value !important; }
}
@each $key, $value in $align-content {
    .align-content-#{$key} { align-content: $value !important; }
}

// Flex Wrap
.flex-wrap {
    flex-wrap: wrap !important;
}

.flex-nowrap {
    flex-wrap: nowrap !important;
}

.flex-wrap-reverse {
    flex-wrap: wrap-reverse !important;
}

// Text Properties
$text-align: (
    "start": start,
    "end": end,
    "center": center,
    "justify": justify,
    "match": match-parent
);

$text-transform: (
    "lowercase": lowercase,
    "uppercase": uppercase,
    "capitalize": capitalize,
    "full": full-width
);

$line-heights: (
    "0": 0,
    "1": 1,
    "2": 1.25,
    "3": 1.5,
    "4": 2,
    "5": 2.5,
    "6": 3
);

@each $key, $value in $text-align {
    .text-#{$key} { text-align: $value !important; }
}

@each $key, $value in $text-transform {
    .text-#{$key} { text-transform: $value !important; }
}

@each $key, $value in $line-heights {
    .lh-#{$key} { line-height: $value !important; }
}

.text-truncate {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

// Text Direction
.ltr { direction: ltr !important; }
.rtl { direction: rtl !important; }

// Spacing (Margin & Padding)
$space-properties: (
    "m": "margin",
    "p": "padding"
);

$space-directions: (
    "t": "top",
    "b": "bottom",
    "s": "inline-start",
    "e": "inline-end"
);

@each $prop-abbr, $prop-full in $space-properties {
    // All sides: .m-1, .p-3
    @each $key, $value in $spacing-steps {
        .#{$prop-abbr}-#{$key} { #{$prop-full}: #{$value} !important; }
    }
    // Negative margins: .m-n1
    @if $prop-abbr == "m" {
        @each $key, $value in $spacing-steps {
            @if $value != 0 and meta.type-of($value) == "number" {
                .#{$prop-abbr}-n#{$key} { #{$prop-full}: calc(-1 * #{$value}) !important; }
            }
        }
    }

    // Axis: .mx-2, .py-4, .mx-n1
    .#{$prop-abbr}x-0 { #{$prop-full}-inline-start: 0 !important; #{$prop-full}-inline-end: 0 !important; }
    .#{$prop-abbr}y-0 { #{$prop-full}-top: 0 !important; #{$prop-full}-bottom: 0 !important; }

    @each $key, $value in $spacing-steps {
         @if $value != 0 {
            .#{$prop-abbr}x-#{$key} { #{$prop-full}-inline-start: #{$value} !important; #{$prop-full}-inline-end: #{$value} !important; }
            .#{$prop-abbr}y-#{$key} { #{$prop-full}-top: #{$value} !important; #{$prop-full}-bottom: #{$value} !important; }
            
            @if $prop-abbr == "m" and meta.type-of($value) == "number" {
                .#{$prop-abbr}x-n#{$key} { #{$prop-full}-inline-start: calc(-1 * #{$value}) !important; #{$prop-full}-inline-end: calc(-1 * #{$value}) !important; }
                .#{$prop-abbr}y-n#{$key} { #{$prop-full}-top: calc(-1 * #{$value}) !important; #{$prop-full}-bottom: calc(-1 * #{$value}) !important; }
            }
        }
    }

    // Individual sides: .mt-1, .ps-3, .mb-n2
    @each $dir-abbr, $dir-full in $space-directions {
         @each $key, $value in $spacing-steps {
            .#{$prop-abbr}#{$dir-abbr}-#{$key} { #{$prop-full}-#{$dir-full}: #{$value} !important; }

             @if $prop-abbr == "m" and $value != 0 and meta.type-of($value) == "number" {
                .#{$prop-abbr}#{$dir-abbr}-n#{$key} { #{$prop-full}-#{$dir-full}: calc(-1 * #{$value}) !important; }
            }
        }
    }
}

// Typography (Font Size & Weight)
$font-sizes: (
    "1": 2.5rem,
    "2": 2rem,
    "3": 1.75rem,
    "4": 1.65rem,
    "5": 1.5rem,
    "6": 1.25rem,
    "7": 1rem
);

$font-weights: (
    "lighter": lighter,
    "normal": normal,
    "bold": bold,
    "bolder": bolder,
    "100": 100,
    "200": 200,
    "300": 300,
    "400": 400,
    "500": 500,
    "600": 600,
    "700": 700,
    "800": 800,
    "900": 900
);

@each $key, $value in $font-sizes {
    .fs-#{$key} { font-size: $value; }
}

@each $key, $value in $font-weights {
    .fw-#{$key} { font-weight: $value; }
}


// Colors (Text & Background)
@each $name, $color in $theme-colors {
    .text-#{$name} { color: $color !important; }
    .bg-#{$name} { background-color: $color !important; }
}

.text-dual {
    background: linear-gradient(to right, var(--border-color) 50%, #FF1D21 50%);
    -webkit-background-clip: text;
    background-clip: text;
    color: transparent;
}

.bg-dual {
    background: linear-gradient(to right, var(--border-color) 50%, #FF1D21 50%);
}

.gradient-center {
    text-align: center;
    width: 100%;
    position: relative;
    &::after {
        content: "";
        position: absolute;
        bottom: 0;
        left: 0;
        width: 100%;
        height: 1px;
        background-image: linear-gradient(to right, transparent 0%, var(--theme-sticky-nav-background-color) 50%, transparent 100%);
    }
}

// Sizing (Width & Height)
$sizes: (
    "10": 10%,
    "20": 20%,
    "25": 25%,
    "30": 30%,
    "33": 33.3333%,
    "40": 40%,
    "50": 50%,
    "60": 60%,
    "66": 66.6667%,
    "70": 70%,
    "75": 75%,
    "77": 77%,
    "80": 80%,
    "90": 90%,
    "95": 95%,
    "100": 100%,
    "auto": auto,
    "fit": fit-content
);

@each $key, $value in $sizes {
    .w-#{$key} { width: $value !important; }
}
.h-25 { height: 25% !important; }
.h-50 { height: 50% !important; }
.h-75 { height: 75% !important; }
.h-100 { height: 100% !important; }
.h-auto { height: auto !important; }

@each $name, $breakpoint in $breakpoints {
    @media (min-width: #{$breakpoint}) {
        @each $key, $value in $sizes {
            .w-#{$name}-#{$key} { width: $value !important; }
        }
    }
}

// Position & Z-index
$positions: "static", "relative", "absolute", "fixed", "sticky";
$z-indices: -1, 0, 1, 2, 3, 4, 5;
$position-values: 0, 50, 100;

@each $pos in $positions {
    .pos-#{$pos} { position: #{$pos} !important; }
}

@each $z in $z-indices {
    $key: if($z < 0, "n" + abs($z), $z);
    .z-#{$key} { z-index: #{$z} !important; }
}

@each $val in $position-values {
    .top-#{$val} { top: #{ $val + '%' } !important; }
    .bottom-#{$val} { bottom: #{ $val + '%' } !important; }
    .left-#{$val} { left: #{ $val + '%' } !important; }
    .right-#{$val} { right: #{ $val + '%' } !important; }
}

// Overflow
$overflows: auto, hidden, visible, scroll;
@each $o in $overflows {
    .overflow-#{$o} { overflow: $o !important; }
    .overflowx-#{$o} { overflow-x: $o !important; }
    .overflowy-#{$o} { overflow-y: $o !important; }
}

// Border Radius
$radius-steps: (
    "0": 0,
    "1": 0.2rem,
    "2": 0.5rem,
    "3": 0.75rem,
    "4": 1rem,
    "5": 1.25rem,
    "6": 1.5rem
);

.rounded { border-radius: $border-radius !important; }
@each $key, $val in $radius-steps {
    .rounded-#{$key} { border-radius: $val !important; }
}
.rounded-tds { border-radius: 25px 0 25px 0 !important; }

$radius-corners: (
    "tl": "top-left",
    "tr": "top-right",
    "br": "bottom-right",
    "bl": "bottom-left"
);
@each $abbr, $full in $radius-corners {
    @each $key, $val in $radius-steps {
        .rounded-#{$abbr}-#{$key} { border-#{$full}-radius: $val !important; }
    }
}
.rounded-tl-tds { border-top-left-radius: 25px !important; }
.rounded-tr-tds { border-top-right-radius: 0 !important; }
.rounded-br-tds { border-bottom-right-radius: 25px !important; }
.rounded-bl-tds { border-bottom-left-radius: 0 !important; }

// Gap
@each $key, $val in $spacing-steps {
    .gap-#{$key} { gap: $val !important; }
}

@each $name, $breakpoint in $breakpoints {
    @media (min-width: #{$breakpoint}) {
        @each $key, $val in $spacing-steps {
            .gap-#{$name}-#{$key} { gap: $val !important; }
        }
    }
}

// Borders
.border-0 { border: 0 !important; }
.border-top-0 { border-top: 0 !important; }
.border-right-0 { border-right: 0 !important; }
.border-bottom-0 { border-bottom: 0 !important; }
.border-left-0 { border-left: 0 !important; }

@for $i from 1 through 5 {
    .border-#{$i} { border-width: #{$i}px !important; }
}

@each $name, $color in $theme-colors {
    .border-#{$name} { border: 1px solid $color; }
}
.border-light { border: 1px solid $light; }
.border-dark { border: 1px solid $dark; }

// Floats
$float-directions: "left", "right", "none";
@each $dir in $float-directions {
    .float-#{$dir} { float: $dir !important; }
}
.clearfix::after {
  display: block;
  clear: both;
  content: "";
}

@each $name, $breakpoint in $breakpoints {
    @media (min-width: #{$breakpoint}) {
        @each $dir in $float-directions {
            .float-#{$name}-#{$dir} { float: $dir !important; }
        }
    }
}

// Table Utilities
.border-collapse { border-collapse: collapse !important; }
.border-separate { border-collapse: separate !important; }

$border-spacing: (
    "0": 0,
    "1": 0.25rem,
    "2": 0.5rem,
    "3": 0.75rem,
    "4": 1rem,
    "5": 1.25rem,
    "6": 1.5rem
);

@each $key, $val in $border-spacing {
    .bs-#{$key} { border-spacing: $val !important; }
    .bs-x-#{$key} { border-spacing: $val 0 !important; }
    .bs-y-#{$key} { border-spacing: 0 $val !important; }
}


// Vertical Alignment
$vertical-aligns: "baseline", "top", "middle", "bottom", "text-top", "text-bottom";
@each $align in $vertical-aligns {
    .align-#{$align} { vertical-align: #{$align} !important; }
}